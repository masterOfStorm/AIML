//Environment -> Create -> tf1(tensor flow 1) -> (Python 3.5.6 or Python 3.6.13) -> Not install me jakr -> Tensor flow, kesar Pandas ye sab download karo (niche apply button aaega)

Program 6 :
Using Keras and Tensor flow framework 
i) Load the Pima_indians_diabetes dataset 
ii) Design a two-layer neural network with one hidden layer and one output layer 
a. Use Relu activation function for the hidden layer 
b. Use sigmoid activation function for the output layer 
iii) Train the designed network for Pima_indians_diabetes 
iv) Evaluate the network 
v) Generate Predictions for 10 samples

from numpy import loadtxt
import numpy as np
import pandas as pd
from keras import models
from keras.models import Sequential
from keras.layers import Dense
from keras import layers
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
import matplotlib.pyplot as plt
dataframe = pd.read_csv('pima-indians-diabetes.csv', delimiter=',')
dataframe.head()


X = dataframe.iloc[:,:8]
y = dataframe.iloc[:,8]
dataframe.shape
features_train,features_test,target_train,target_test=train_test_split(X,y,test_size=0.33,random_state=0)
network=models.Sequential()
network.add(Dense(units=8,activation="relu",input_shape=(features_train.shape[1],)))
network.add(Dense(units=8,activation="relu"))
network.add(Dense(units=1,activation="sigmoid"))
network.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
history=network.fit(features_train,target_train,epochs=20,verbose=1,batch_size=100,validation_data=(features_test,target_test))


training_loss=history.history["loss"]
test_loss=history.history["val_loss"]
epoch_count=range(1,len(training_loss)+1)
plt.plot(epoch_count,training_loss,"r--")
plt.plot(epoch_count,test_loss,"b-")
plt.legend(["Training Loss","Test Loss"])
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.show()


_, accuracy = network.evaluate(features_train,target_train)
print('Accuracy: %.2f' % (accuracy*100))
predicted_target= network.predict(features_test)
_, accuracy = network.evaluate(features_test,target_test)
print('Accuracy: %.2f' % (accuracy*100))

for i in range(10):
    print(predicted_target[i])

training_accuracy=history.history["accuracy"]
test_accuracy=history.history["val_accuracy"]
plt.plot(epoch_count,training_accuracy,"r--")
plt.plot(epoch_count,test_accuracy,"b-")
plt.legend(["Training Accuracy","Test Accuracy"])
plt.xlabel("Epoch")
plt.ylabel("Accuracy Score")
plt.show()

